using Unity.Entities;
using Unity.Jobs;
using UnityEngine;

namespace {{NAMESPACE}}
{
    // [AlwaysUpdateSystem]
    // [DisableAutoCreationAttribute]
    // [UpdateBefore (typeof (SomeType))]
    // [UpdateAfter (typeof (SomeType))]
    // [ExecuteInEditMode]
    public class {{CLASSNAME}} : JobComponentSystem
    {
        struct InjectData
        {
            public int Length;
            // public ComponentDataArray<SomeComponentData> someComponentDatas;
            // [ReadOnly] public SharedComponentDataArray<SomeSharedCompoentDatas> someSharedComponentDatas;
            // public SubtractiveComponent<SomeComponentData> sub;
        }

        [Inject] InjectData data;
        // [Inject] {{CLASSNAME}}Barrier barrier;
        protected override JobHandle OnUpdate (JobHandle inputDeps)
        {
            // var buffer = barrier.CreateCommandBuffer ();
            return inputDeps;
        }

        protected override void OnCreateManager (int capacity)
        {

        }

        protected override void OnDestroyManager ()
        {

        }
        protected override void OnStartRunning ()
        {

        }

        protected override void OnStopRunning ()
        {

        }
    }

    // public class {{CLASSNAME}}Barrier : BarrierSystem { }
}